{"version":3,"sources":["components/charts/BarChart/BarChart.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BarChart","_this$props","this","props","viewBoxWidth","viewBoxHeight","style","data","yScale","scaleLinear","domain","Math","max","apply","rangeRound","barWidth","floor","length","react_default","a","createElement","viewBox","concat","className","map","element","index","key","x","y","rx","ry","width","height","fill","strokeWidth","stroke","Component","App","BarChart_BarChart_BarChart","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAsBqBA,0LACD,IAAAC,EACmCC,KAAKC,MAA5CC,EADIH,EACJG,aAAcC,EADVJ,EACUI,cAAeC,EADzBL,EACyBK,MAE/BC,EAAO,CAAC,GAAI,GAAI,GAAI,GAAI,IACxBC,EAASC,cACVC,OAAO,CAAC,EAAGC,KAAKC,IAALC,MAAAF,KAAYJ,KACvBO,WAAW,CAACT,EAAe,IAE1BU,EAAWJ,KAAKK,OAAOZ,EADT,IACyBG,EAAKU,OAAS,IAAoBV,EAAKU,QAEpF,OACIC,EAAAC,EAAAC,cAAA,OACIC,QAAO,OAAAC,OAASlB,EAAT,KAAAkB,OAAyBjB,GAChCC,MAAOA,EACPiB,UAAU,YAEThB,EAAKiB,IAAI,SAACC,EAASC,GAAV,OACNR,EAAAC,EAAAC,cAAA,QACIO,IAAG,OAAAL,OAASI,GACZE,EAAGF,GAASX,EAZR,IAaJc,EAAGrB,EAAOiB,GACVK,GAAI,EACJC,GAAI,EACJC,MAAOjB,EAAW,EAClBkB,OAAQ5B,EAAgBG,EAAOiB,GAC/BnB,MAAO,CACH4B,KAAM,UACNC,YAAa,EACbC,OAAQ,uBA7BEC,wCCMvBC,mLAlBP,OACIpB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACXL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,aACdL,EAAAC,EAAAC,cAAA,uCAEAF,EAAAC,EAAAC,cAACmB,EAAD,CACInC,aAAc,IACdC,cAAe,IACfE,KAAMA,EACND,MAAO,CACHkC,gBAAiB,kBAZ3BH,aCIEI,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SDoIzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAC/BA,EAAaC","file":"static/js/main.64ba0000.chunk.js","sourcesContent":["import React, { Component, CSSProperties } from 'react';\n\nimport { scaleLinear } from 'd3-scale';\n\nimport './BarChart.css';\n\ninterface DataPoint\n{\n    year: string,\n    projects: {\n        react: number,\n        angular: number\n    }\n}\n\ninterface Props {\n    viewBoxWidth: number,\n    viewBoxHeight: number,\n    data: DataPoint[];\n    style?: CSSProperties;\n}\n\nexport default class BarChart extends Component<Props, object> {\n    public render() {\n        const { viewBoxWidth, viewBoxHeight, style } = this.props;\n\n        const data = [10, 15, 20, 25, 40]; // Temp data to use instead of data in props, for now.\n        const yScale = scaleLinear()\n            .domain([0, Math.max(...data)])\n            .rangeRound([viewBoxHeight, 0]);\n        const barInterval = 10;\n        const barWidth = Math.floor((viewBoxWidth - (data.length - 1) * barInterval) / data.length);\n\n        return (\n            <svg\n                viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}\n                style={style}\n                className=\"barChart\"\n            >\n                {data.map((element, index) =>\n                    <rect\n                        key={`bar ${index}`}\n                        x={index * (barWidth + barInterval)}\n                        y={yScale(element)}\n                        rx={6}\n                        ry={6}\n                        width={barWidth - 1}\n                        height={viewBoxHeight - yScale(element)}\n                        style={{\n                            fill: '#0000ff',\n                            strokeWidth: 3,\n                            stroke: '#00ccff'\n                        }}\n                    />,\n                )}\n            </svg>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nimport BarChart from './components/charts/BarChart/BarChart';\n\nimport './App.css';\n\nimport * as data from './data/BarChart.json';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <header className=\"appHeader\">\n                    <h1>React Data Visualization</h1>\n                </header>\n                    <BarChart\n                        viewBoxWidth={400}\n                        viewBoxHeight={250}\n                        data={data}\n                        style={{\n                            backgroundColor: '#ccc'\n                        }}\n                    />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister()\n                        .then(() => {\n                            window.location.reload();\n                        });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}